const Sqlite = require('better-sqlite3');

let db = new Sqlite('db.sqlite');


var load = function() {
    db.prepare('DROP TABLE IF EXISTS studentusers').run();
    db.prepare('DROP TABLE IF EXISTS teacherusers').run();
    db.prepare('DROP TABLE IF EXISTS courses').run();
    db.prepare('DROP TABLE IF EXISTS likers').run();
    db.prepare('DROP TABLE IF EXISTS favorite').run();



    db.prepare('CREATE TABLE studentusers (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT , password TEXT)').run();
    db.prepare('CREATE TABLE teacherusers (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT , password TEXT)').run();
    db.prepare('CREATE TABLE courses (id INTEGER PRIMARY KEY AUTOINCREMENT, subject TEXT NOT NULL, title TEXT NOT NULL, teacher TEXT NOT NULL, description TEXT NOT NULL)').run();
    db.prepare('CREATE TABLE likers (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL, course_id INTEGER )').run();
    db.prepare('CREATE TABLE favorite (id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT NOT NULL, course_id INTEGER , course_subject TEXT, course_title TEXT, course_teacher TEXT)').run();


    db.prepare('INSERT INTO studentusers (name, password) VALUES (@name, @password)').run(  {name: "sharbel", password: "password"});
    db.prepare('INSERT INTO studentusers (name, password) VALUES (@name, @password)').run(  {name: "nicolas", password: "password"});
    db.prepare('INSERT INTO studentusers (name, password) VALUES (@name, @password)').run(  {name: "cedric", password: "password"});
    db.prepare('INSERT INTO studentusers (name, password) VALUES (@name, @password)').run(  {name: "jean-charles", password: "password"});
    db.prepare('INSERT INTO studentusers (name, password) VALUES (@name, @password)').run(  {name: "antoin", password: "password"});

    db.prepare('INSERT INTO teacherusers (name, password) VALUES (@name, @password)').run(  {name: "marc", password: "password"});
    db.prepare('INSERT INTO teacherusers (name, password) VALUES (@name, @password)').run(  {name: "philip", password: "password"});


    db.prepare('INSERT INTO courses (subject, title, teacher, description ) VALUES (@subject, @title, @teacher, @description)').run(  {subject:"Programation", title: "C++ language", teacher: "marc", description: "C++ is a high-level, general-purpose programming language created by Bjarne Stroustrup as an extension of the C programming language, or 'C with Classes'. The language has expanded significantly over time, and modern C++ now has object-oriented, generic, and functional features in addition to facilities for low-level memory manipulation. It is almost always implemented as a compiled language, and many vendors provide C++ compilers, including the Free Software Foundation, LLVM, Microsoft, Intel, Oracle, and IBM, so it is available on many platforms. C++ was designed with a bias toward system programming and embedded, resource-constrained software and large systems, with performance, efficiency, and flexibility of use as its design highlights.C++ has also been found useful in many other contexts, with key strengths being software infrastructure and resource-constrained applications, including desktop applications, video games, servers (e.g. e-commerce, Web search, or SQL servers), and performance-critical applications (e.g. telephone switches or space probes).C++ is standardized by the International Organization for Standardization (ISO), with the latest standard version ratified and published by ISO in December 2017 as ISO/IEC 14882:2017 (informally known as C++17). The C++ programming language was initially standardized in 1998 as ISO/IEC 14882:1998, which was then amended by the C++03, C++11 and C++14 standards. The current C++17 standard supersedes these with new features and an enlarged standard library. Before the initial standardization in 1998, C++ was developed by Danish computer scientist Bjarne Stroustrup at Bell Labs since 1979 as an extension of the C language; he wanted an efficient and flexible language similar to C that also provided high-level features for program organization. C++20 is the next planned standard, keeping with the current trend of a new version every three years." });
    db.prepare('INSERT INTO courses (subject, title, teacher, description ) VALUES (@subject, @title, @teacher, @description)').run(  {subject:"Programation", title: "Java language", teacher: "marc",
     description: "Java is a general-purpose programming language that is class-based, object-oriented, and designed to have as few implementation dependencies as possible. It is intended to let application developers write once, run anywhere (WORA), meaning that compiled Java code can run on all platforms that support Java without the need for recompilation. Java applications are typically compiled to bytecode that can run on any Java virtual machine (JVM) regardless of the underlying computer architecture. The syntax of Java is similar to C and C++, but it has fewer low-level facilities than either of them. As of 2019, Java was one of the most popular programming languages in use according to GitHub, particularly for client-server web applications, with a reported 9 million developers Java was originally developed by James Gosling at Sun Microsystems (which has since been acquired by Oracle) and released in 1995 as a core component of Sun Microsystems' Java platform. The original and reference implementation Java compilers, virtual machines, and class libraries were originally released by Sun under proprietary licenses. As of May 2007, in compliance with the specifications of the Java Community Process, Sun had relicensed most of its Java technologies under the GNU General Public License. Meanwhile, others have developed alternative implementations of these Sun technologies, such as the GNU Compiler for Java (bytecode compiler), GNU Classpath (standard libraries), and IcedTea-Web (browser plugin for applets). The latest versions are Java 14, released in March 2020, and Java 11, a currently supported long-term support (LTS) version, released on September 25, 2018; Oracle released for the legacy Java 8 LTS the last free public update in January 2019 for commercial use, while it will otherwise still support Java 8 with public updates for personal use up to at least December 2020. Oracle (and others) highly recommend uninstalling older versions of Java because of serious risks due to unresolved security issues. Since Java 9, 10, 12 and 13 are no longer supported, Oracle advises its users to immediately transition to the latest version (currently Java 14) or an LTS release. "});
    db.prepare('INSERT INTO courses (subject, title, teacher, description ) VALUES (@subject, @title, @teacher, @description)').run(  {subject:"Programation", title: "C language", teacher: "marc", description: "C  is a general-purpose, procedural computer programming language supporting structured programming, lexical variable scope, and recursion, while a static type system prevents unintended operations. By design, C provides constructs that map efficiently to typical machine instructions and has found lasting use in applications previously coded in assembly language. Such applications include operating systems and various application software for computers, from supercomputers to PLCs and, to embedded systems.<br> C was originally developed at Bell Labs by Dennis Ritchie between 1972 and 1973 to make utilities running on Unix. Later, it was applied to re-implementing the kernel of the Unix operating system. During the 1980s, C gradually gained popularity. It has become one of the most widely used programming languages with C compilers from various vendors available for the majority of existing computer architectures and operating systems. C has been standardized by the ANSI since 1989 (see ANSI C) and by the International Organization for Standardization. C is an imperative procedural language. It was designed to be compiled using a relatively straightforward compiler to provide low-level access to memory and language constructs that map efficiently to machine instructions, all with minimal runtime support. Despite its low-level capabilities, the language was designed to encourage cross-platform programming. A standards-compliant C program written with portability in mind can be compiled for a wide variety of computer platforms and operating systems with few changes to its source code. The language is available on various platforms, from embedded microcontrollers to supercomputers. "});
    db.prepare('INSERT INTO courses (subject, title, teacher, description ) VALUES (@subject, @title, @teacher, @description)').run(  {subject:"Automata", title: "Finite-state machine", teacher: "philip", description: "A finite-state machine (FSM) or finite-state automaton (FSA, plural: automata), finite automaton, or simply a state machine, is a mathematical model of computation. It is an abstract machine that can be in exactly one of a finite number of states at any given time. The FSM can change from one state to another in response to some inputs; the change from one state to another is called a transition. An FSM is defined by a list of its states, its initial state, and the inputs that trigger each transition. Finite-state machines are of two typesâ€”deterministic finite-state machines and non-deterministic finite-state machines. A deterministic finite-state machine can be constructed equivalent to any non-deterministic one. The behavior of state machines can be observed in many devices in modern society that perform a predetermined sequence of actions depending on a sequence of events with which they are presented. Simple examples are vending machines, which dispense products when the proper combination of coins is deposited, elevators, whose sequence of stops is determined by the floors requested by riders, traffic lights, which change sequence when cars are waiting, and combination locks, which require the input of a sequence of numbers in the proper order. The finite-state machine has less computational power than some other models of computation such as the Turing machine. The computational power distinction means there are computational tasks that a Turing machine can do but a FSM cannot. This is because a FSM's memory is limited by the number of states it has. FSMs are studied in the more general field of automata theory. "});

    db.prepare('INSERT INTO likers (name, course_id) VALUES (@name, @course_id)').run(  {name: "sharbel", course_id: 1});
    db.prepare('INSERT INTO likers (name, course_id) VALUES (@name, @course_id)').run(  {name: "cedric", course_id: 2});
    db.prepare('INSERT INTO likers (name, course_id) VALUES (@name, @course_id)').run(  {name: "antoin", course_id: 2});
    db.prepare('INSERT INTO likers (name, course_id) VALUES (@name, @course_id)').run(  {name: "sharbel", course_id: 3});
    db.prepare('INSERT INTO likers (name, course_id) VALUES (@name, @course_id)').run(  {name: "nicolas", course_id: 3});
    db.prepare('INSERT INTO likers (name, course_id) VALUES (@name, @course_id)').run(  {name: "cedric", course_id: 3});
    db.prepare('INSERT INTO likers (name, course_id) VALUES (@name, @course_id)').run(  {name: "jean-charles", course_id: 3});
    

    db.prepare('INSERT INTO favorite (name, course_id, course_subject, course_title, course_teacher) VALUES (@name, @course_id, @course_subject, @course_title, @course_teacher)').run(  {name: "sharbel", course_id: 1, course_subject:"Programation",course_title:"C++ language", course_teacher:"marc"});

 
}
 load();